from fastapi import FastAPI, UploadFile, File, HTTPException
from pydantic import BaseModel
from typing import List, Optional
import json
import hashlib
import time

# ---------------- KAORAN Core ----------------
class KaoranValidator:
    def __init__(self, version="0.1.0"):
        self.version = version

    def _hash_str(self, value: str) -> str:
        return hashlib.sha256(value.encode("utf-8")).hexdigest()[:12]

    def validate(self, input_data: dict) -> dict:
        start_time = time.time()

        required_fields = ["artifact", "lineage", "claimed_origin", "validation_mode"]
        anomalies = []

        # Etapa 1: Integridade Estrutural
        integrity_score = 1.0
        for field in required_fields:
            if field not in input_data:
                anomalies.append(f"Campo ausente: {field}")
                integrity_score -= 0.3

        if not isinstance(input_data.get("lineage", []), list):
            anomalies.append("Campo 'lineage' não é uma lista")
            integrity_score -= 0.2
        integrity_score = max(0, min(integrity_score, 1))

        # Etapa 2: Coerência Semântica
        semantic_score = 1.0
        if not input_data.get("artifact"):
            anomalies.append("Artifact vazio ou nulo")
            semantic_score -= 0.5
        semantic_score = max(0, min(semantic_score, 1))

        # Etapa 3: Preservação Essencial
        preservation_score = 1.0
        if len(str(input_data.get("artifact", ""))) < 5:
            anomalies.append("Possível perda de conteúdo essencial")
            preservation_score -= 0.5
        preservation_score = max(0, min(preservation_score, 1))

        # Etapa 4: Assinatura Vibracional
        signature_score = 1.0
        if "signature" in input_data:
            expected_hash = self._hash_str(
                input_data["claimed_origin"] + str(input_data["artifact"])
            )
            if not input_data["signature"].startswith(expected_hash[:6]):
                anomalies.append("Assinatura não corresponde à origem declarada")
                signature_score -= 0.7
        else:
            signature_score -= 0.5
            anomalies.append("Assinatura ausente")
        signature_score = max(0, min(signature_score, 1))

        # Score final
        score = round(
            (0.3 * integrity_score) +
            (0.4 * semantic_score) +
            (0.2 * preservation_score) +
            (0.1 * signature_score), 2
        )

        # Determinar status
        if score >= 0.85:
            status = veredito = "aligned"
        elif score >= 0.65:
            status = veredito = "marginal"
        elif score >= 0.30:
            status = veredito = "incoherent"
        else:
            status = veredito = "rejected"

        # Hash final
        timestamp = str(int(time.time()))
        verification_hash = self._hash_str(veredito + str(score) + timestamp)
        assinatura = "kaor-" + verification_hash

        return {
            "status": status,
            "agente": "KAORAN",
            "versao": self.version,
            "etapas": [
                "análise_estrutural",
                "verificação_semântica",
                "checagem_assinatura",
                "estabilização_se_necessário"
            ],
            "resultado": {
                "veredito": veredito,
                "score": score,
                "anomalies": anomalies,
                "repair_suggestion": {},
                "verification_hash": verification_hash
            },
            "meta": {
                "assinatura": assinatura,
                "tempo_ms": int((time.time() - start_time) * 1000),
                "taxa_confiança": score,
                "complexidade_verificação": "baixa" if len(anomalies) == 0 else "média"
            }
        }


# ---------------- API ----------------
app = FastAPI(title="KAORAN API", version="0.1.0")
kaoran = KaoranValidator()


# Modelo de entrada via JSON
class ArtifactInput(BaseModel):
    artifact: str
    lineage: List[str]
    claimed_origin: str
    signature: Optional[str] = None
    validation_mode: str


@app.post("/validate/json")
def validate_json(input_data: ArtifactInput):
    return kaoran.validate(input_data.dict())


@app.post("/validate/file")
async def validate_file(file: UploadFile = File(...)):
    if not file.filename.endswith(".json"):
        raise HTTPException(status_code=400, detail="Arquivo deve ser JSON")
    try:
        content = await file.read()
        data = json.loads(content)
        return kaoran.validate(data)
    except json.JSONDecodeError:
        raise HTTPException(status_code=400, detail="JSON inválido")


@app.get("/")
def root():
    return {"message": "KAORAN API ativa. Use /validate/json ou /validate/file"}

